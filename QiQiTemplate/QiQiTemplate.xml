<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QiQiTemplate</name>
    </assembly>
    <members>
        <member name="T:QiQiTemplate.Context.EACHNodeContext">
            <summary>
            each 循环节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.EACHNodeContext.ParsingRegex">
            <summary>
            解析语法正则
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.EACHNodeContext._val">
            <summary>
            循环值
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.EACHNodeContext._idx">
            <summary>
            循环索引
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.EACHNodeContext.Model">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.EACHNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.EACHNodeContext.ParsingModel">
            <summary>
            解析节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.EACHNodeContext.ConvertToExpression">
            <summary>
            转换为表达式
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.ELSEIFNodeContext">
            <summary>
            ElseIf 节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ELSEIFNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.ELSEIFNodeContext.FormatCode">
            <summary>
            格式化code
            </summary>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Context.ELSENodeContext">
            <summary>
            elae 节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ELSENodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.ELSENodeContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ELSENodeContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.IFNodeContext">
            <summary>
            if 节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.IFNodeContext.ParsingRegex">
            <summary>
            正则
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.IFNodeContext.Model">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.IFNodeContext.ELSENode">
            <summary>
            else 节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.IFNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.IFNodeContext.FormatCode">
            <summary>
            格式化
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.IFNodeContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.IFNodeContext.CreateConditionExpression">
            <summary>
            创建条件表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.IFNodeContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.NodeBlockContext">
            <summary>
            块节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeBlockContext.Nodes">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeBlockContext.Scope">
            <summary>
            存放变量的作用域.
            变量值类型统一转为 DynmicModel,Each的索引除外
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeBlockContext.DefineParams">
            <summary>
            存放范围内需要声明的变量
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.NodeBlockContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            初始化块节点
            </summary>
            <param name="code">代码串</param>
            <param name="parent">父节点</param>
            <param name="output">输出类</param>
        </member>
        <member name="M:QiQiTemplate.Context.NodeBlockContext.SearchVariable(System.String)">
            <summary>
            递归的在父节点上搜索变量
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.NodeBlockContext.TrySearchVariable(System.String,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            尝试递归的在父节点上搜索变量
            </summary>
            <param name="name"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.NodeBlockContext.MergeNodes">
            <summary>
            合并当前块节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Context.NodeContext">
            <summary>
            语法节点抽象类
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.PrintProvide">
            <summary>
            输出提供类
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.NodeId">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.NdType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.NdExpression">
            <summary>
            节点表达式
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.CodeString">
            <summary>
            节点代码串
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.NodeContext.ParentNode">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.ParsingModel">
            <summary>
            解析Code
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.ConvertToExpression">
            <summary>
            将节点转为Expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.ConvertToDynamicModel(System.Linq.Expressions.Expression,System.String)">
            <summary>
            将int,string,bool,char,decimal转为DynamicModel类型的表达式树
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.SearchPath(System.String,System.Linq.Expressions.ParameterExpression)">
            <summary>
            根据对象访问路径构建表达式
            </summary>
            <param name="sourcePath"></param>
            <param name="param_out"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Context.NodeContext.CreateConstExpression(QiQiTemplate.Enum.FieldType,System.String)">
            <summary>
            创建常量表达式
            </summary>
            <param name="fdType"></param>
            <param name="fdValue"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Context.OperNodeContext">
            <summary>
            运算
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.OperNodeContext.Model">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.OperNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.OperNodeContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.OperNodeContext.ParsingModel">
            <summary>
            解析语句
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.PRINTNodeContext">
            <summary>
            输出节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.PRINTNodeContext.Model">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.PRINTNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.PRINTNodeContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.PRINTNodeContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.ScopeBlockContext">
            <summary>
            范围节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.ScopeBlockContext.RootName">
            <summary>
            根数据访问名称
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.ScopeBlockContext.Root">
            <summary>
            根数据
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ScopeBlockContext.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ScopeBlockContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.ScopeBlockContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.SETNodeContext">
            <summary>
            定义变量节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Context.SETNodeContext.ParsingRegex">
            <summary>
            正则
            </summary>
        </member>
        <member name="P:QiQiTemplate.Context.SETNodeContext.Model">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.SETNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.SETNodeContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.SETNodeContext.ConvertToExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="T:QiQiTemplate.Context.STRINGNodeContext">
            <summary>
            String 节点
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.STRINGNodeContext.#ctor(System.String,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            构造
            </summary>
            <param name="code"></param>
            <param name="parent"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Context.STRINGNodeContext.ConvertToExpression">
            <summary>
            转为表达式
            </summary>
        </member>
        <member name="M:QiQiTemplate.Context.STRINGNodeContext.ParsingModel">
            <summary>
            解析
            </summary>
        </member>
        <member name="T:QiQiTemplate.Enum.FieldType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.Int">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.Decimal">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.Char">
            <summary>
            字符
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.Bool">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.FieldType.SourcePath">
            <summary>
            访问路径
            </summary>
        </member>
        <member name="T:QiQiTemplate.Enum.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.IF">
            <summary>
            {{#if}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ENDIF">
            <summary>
            {{#/if}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ELSEIF">
            <summary>
            {{#else if}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ENDELSEIF">
            <summary>
            {{#/else if}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ELSE">
            <summary>
            //{{#else}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ENDELSE">
            <summary>
            {{#/else}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.EACH">
            <summary>
            {{#each}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.ENDEACH">
            <summary>
            {{#/each}}
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.PRINT">
            <summary>
            print 打印节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.SET">
            <summary>
            set 定义变量节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.STRING">
            <summary>
            字符串节点
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.NodeType.OPER">
            <summary>
            运算
            </summary>
        </member>
        <member name="T:QiQiTemplate.Enum.PrintType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.PrintType.String">
            <summary>
            print语句 前的String
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.PrintType.Variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="T:QiQiTemplate.Enum.SourcePathType">
            <summary>
            访问路径类型
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.SourcePathType.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.SourcePathType.Attribute">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.SourcePathType.Variable">
            <summary>
            变量(访问路径的第一个节点)
            </summary>
        </member>
        <member name="F:QiQiTemplate.Enum.SourcePathType.SourcePath">
            <summary>
            访问路径
            </summary>
        </member>
        <member name="T:QiQiTemplate.Filter.IFilter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.IFilter.Name">
            <summary>
            过滤器名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.IFilter.Filter(System.Object,System.Object[])">
            <summary>
            执行过滤
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.IsNullFilter">
            <summary>
            空值过滤器
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.IsNullFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.IsNullFilter.Filter(System.Object,System.Object[])">
            <summary>
            过滤
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.JoinFilter">
            <summary>
            拼接数组
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.JoinFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.JoinFilter.Filter(System.Object,System.Object[])">
            <summary>
            拼接
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.OperFilter">
            <summary>
            运算过滤器
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.OperFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.OperFilter.Filter(System.Object,System.Object[])">
            <summary>
            减法运算
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.PadLeftFilter">
            <summary>
            向左补位
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.PadLeftFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.PadLeftFilter.Filter(System.Object,System.Object[])">
            <summary>
            过滤
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.PadRightFilter">
            <summary>
            向右补位
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.PadRightFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.PadRightFilter.Filter(System.Object,System.Object[])">
            <summary>
            过滤
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.ThenFilter">
            <summary>
            三元表达式
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.ThenFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.ThenFilter.Filter(System.Object,System.Object[])">
            <summary>
            表达式
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.ToLowerFilter">
            <summary>
            转为小写
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.ToLowerFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.ToLowerFilter.Filter(System.Object,System.Object[])">
            <summary>
            转为小写
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.ToUpperCaseFilter">
            <summary>
            首字母大写
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.ToUpperCaseFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.ToUpperCaseFilter.Filter(System.Object,System.Object[])">
            <summary>
            首字母大写
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Filter.ToUpperFilter">
            <summary>
            转为大写
            </summary>
        </member>
        <member name="P:QiQiTemplate.Filter.ToUpperFilter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:QiQiTemplate.Filter.ToUpperFilter.Filter(System.Object,System.Object[])">
            <summary>
            转为大写
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Model.DeFineModel">
            <summary>
            变量定义节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DeFineModel.FdType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DeFineModel.ArgName">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DeFineModel.ArgValue">
            <summary>
            变量值
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.DynamicModel">
            <summary>
            数据实体
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DynamicModel.FdName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DynamicModel.FdValue">
            <summary>
            值
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.DynamicModel.Count">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Get(System.String)">
            <summary>
            根据名称获取子节点
            </summary>
            <param name="fdName"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Get(System.Int32)">
            <summary>
            根据索引获取子节点
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Get(System.Decimal)">
            <summary>
            获取子节点
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Get(QiQiTemplate.Model.DynamicModel)">
            <summary>
            获取子节点
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.GetValues">
            <summary>
            获取所有子节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Set(QiQiTemplate.Model.DynamicModel)">
            <summary>
            添加节点
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.ToString">
            <summary>
            将值转为String
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_GreaterThan(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_LessThan(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_GreaterThanOrEqual(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_LessThanOrEqual(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_Equality(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_Inequality(QiQiTemplate.Model.DynamicModel,QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field1"></param>
            <param name="field2"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_Increment(QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.op_Decrement(QiQiTemplate.Model.DynamicModel)">
            <summary>
            重载操作符
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.GetHashCode">
            <summary>
            重载操作符
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Model.DynamicModel.Equals(System.Object)">
            <summary>
            重载操作符
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Model.EachModel">
            <summary>
            EACH 节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.EachModel.SourcePath">
            <summary>
            数据源访问路径
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.EachModel.ValName">
            <summary>
            循环值
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.EachModel.IdxName">
            <summary>
            循环索引
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.FieldModel">
            <summary>
            字段实体
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.FieldModel.FdType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.FieldModel.FdValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.IFModel">
            <summary>
            IF 节点
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.LogOper">
            <summary>
            逻辑运算符
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.LeftType">
            <summary>
            左字段类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.Left">
            <summary>
            左字段
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.RightType">
            <summary>
            右字段类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.Right">
            <summary>
            右字段
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.IFModel.Oper">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.PrintModel">
            <summary>
            输出节点实体
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.PrintModel.PtType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.PrintModel.SourcePath">
            <summary>
            值
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.PrintModel.FilterName">
            <summary>
            过滤器名称
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.PrintModel.Args">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.SetModel">
            <summary>
            变量赋值和计算model
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.SetModel.Name">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.SetModel.Oper">
            <summary>
            运算符号,
            暂时只支持++,--
            </summary>
        </member>
        <member name="T:QiQiTemplate.Model.SourcePathModel">
            <summary>
            访问路径实体
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.SourcePathModel.PathType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.SourcePathModel.SourcePath">
            <summary>
            值
            </summary>
        </member>
        <member name="P:QiQiTemplate.Model.SourcePathModel.ChildSourcePathModel">
            <summary>
            当访问节点是一个变量时,记录它的访问路径.
            例如:
            1._data.people[arr[0].value].name.
            2.其中arr[0].value就是变量节点.
            3.这样的情况还能无限的嵌套下去.
            </summary>
        </member>
        <member name="T:QiQiTemplate.Provide.DynamicModelProvide">
            <summary>
            数据提供类
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.DynamicModelProvide.CreateByJson(System.String)">
            <summary>
            从json字符串加载数据
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.DynamicModelProvide.CreateByFilePath(System.String)">
            <summary>
            从json文件加载数据
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Provide.FilterProvide">
            <summary>
            过滤器提供类
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.FilterProvide.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.FilterProvide.RegisFilter``1">
            <summary>
            注册过滤器
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.FilterProvide.GetFilter(System.String)">
            <summary>
            根据名称获取过滤器
            </summary>
            <param name="filterName">过滤器名称</param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Provide.NodeContextProvide">
            <summary>
            几点解析提供类
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide._lineNumber">
            <summary>
            行号
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsIFRegex">
            <summary>
            针对if的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsENDIFRegex">
            <summary>
            针对if结束的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsELSEIFRegex">
            <summary>
            针对else if的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsENDELSEIFRegex">
            <summary>
            else if 结束
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsELSERegex">
            <summary>
            针对else的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsENDELSERegex">
            <summary>
            else 结束
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsEACHRegex">
            <summary>
            针对each循环的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsENDEACHRegex">
            <summary>
            针对each结束的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsPRINTRegex">
            <summary>
            针对print的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsDEFINERegex">
            <summary>
            针对set的匹配
            </summary>
        </member>
        <member name="F:QiQiTemplate.Provide.NodeContextProvide.IsSETRegex">
            <summary>
            针对oper的匹配
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.NodeContextProvide.BuildTemplateByReader(System.IO.StreamReader,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            编译模板
            </summary>
            <param name="reader"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.NodeContextProvide.BuildTemplateByPath(System.String,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            编译模板
            </summary>
            <param name="path"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.NodeContextProvide.BuildTemplateByString(System.String,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            编译模板
            </summary>
            <param name="template"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.NodeContextProvide.CreateNodeContextRange(System.IO.StreamReader,QiQiTemplate.Context.NodeBlockContext,QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            将语法解析为节点树
            </summary>
            <param name="reader"></param>
            <param name="ParentNode"></param>
            <param name="output"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.NodeContextProvide.GetNodeType(System.String)">
            <summary>
            获取代码节点的类型
            [需要注意顺序]
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Provide.OutPutProvide">
            <summary>
            输出类
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.#ctor(System.Text.StringBuilder)">
            <summary>
            根据StringBuilder构造
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.Print(System.Object)">
            <summary>
            输出
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.Print(System.Object,System.String,System.Object[])">
            <summary>
            输出,带过滤器
            </summary>
            <param name="code"></param>
            <param name="filter"></param>
            <param name="args"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.PrintLine(System.Object)">
            <summary>
            输出并换行
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.PrintLine">
            <summary>
            输出换行
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.ToString">
            <summary>
            将输入内容转为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.Clear">
            <summary>
            清空输出取
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.OutPutProvide.OutPut(System.String,System.Boolean)">
            <summary>
            输出到文件
            </summary>
            <param name="path"></param>
            <param name="withbom">utf8格式是否带bom</param>
        </member>
        <member name="T:QiQiTemplate.Provide.PrintExpressionProvide">
            <summary>
            输出表达式提供类
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.PrintExpressionProvide.#ctor(QiQiTemplate.Provide.OutPutProvide)">
            <summary>
            指定输出类创建表达式提供类
            </summary>
            <param name="outPut"></param>
        </member>
        <member name="M:QiQiTemplate.Provide.PrintExpressionProvide.ExpressionPrint(System.Linq.Expressions.Expression)">
            <summary>
            不换行输出
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.PrintExpressionProvide.ExpressionPrint(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            不换行输出,带过滤器
            </summary>
            <param name="code"></param>
            <param name="filterName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.PrintExpressionProvide.ExpressionPrintLine(System.Linq.Expressions.Expression)">
            <summary>
            换行输出
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:QiQiTemplate.Provide.PrintExpressionProvide.ExpressionPrintLine">
            <summary>
            空行
            </summary>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Provide.SourcePathProvider">
            <summary>
            访问路径解析提供类
            </summary>
        </member>
        <member name="M:QiQiTemplate.Provide.SourcePathProvider.CreateSourcePath(System.String)">
            <summary>
            解析访问路径
            </summary>
            <param name="sourcePath"></param>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Tool.StringConvert">
            <summary>
            字符转义
            </summary>
        </member>
        <member name="M:QiQiTemplate.Tool.StringConvert.Convert1(System.String)">
            <summary>
            { 和 }的转义
            </summary>
            <returns></returns>
        </member>
        <member name="T:QiQiTemplate.Tool.TypeHelper">
            <summary>
            类型辅助
            </summary>
        </member>
        <member name="M:QiQiTemplate.Tool.TypeHelper.GetFieldTypeByValue(System.String@)">
            <summary>
            获取字符串的类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
